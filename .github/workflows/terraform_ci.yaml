name: 'Terraform CI'

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

env:
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  test:
    name: 'Terraform CI'
    runs-on: ${{ vars.RUNS_ON }}

    defaults:
      run:
        shell: ${{ vars.DEFAULT_SHELL }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ vars.TERRAFORM_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Create Terraform Plugin Cache Dir
      run: mkdir --parents $TF_PLUGIN_CACHE_DIR

    - name: Cache Terraform
      uses: actions/cache@v2
      with:
        path: ${{ env.TF_PLUGIN_CACHE_DIR }}
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
    
    - name: Terraform init
      run: terraform init

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validation
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color

    - uses: actions/github-script@v7
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
          #### Terraform Validation: \`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
  
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
  
          </details>
  
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
  
          <details><summary>Show Plan</summary>
  
          \`\`\`tf\n
          ${process.env.PLAN}
          \`\`\`
  
          </details>
  
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
  
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

